plot(EPL1415$FTR ~ EPL1415$Referee, ylab = "Winning Team or Draw", xlab = "")
par(las=0)
mtext(side = 1, text = "Referee", line = 8)
GoalDifference <- apply((EPL1415$FTHG - EPL1415$FTAG),1,sum())
GoalDifference <- apply((EPL1415$FTHG - EPL1415$FTAG),1,sum
)
GoalDifference <- apply((EPL1415$FTHG - EPL1415$FTAG),1,sum)
GoalDifference <- rowsum(EPL1415$FTHG - EPL1415$FTAG)
?rowsum
GoalDifference <- rowsum(EPL1415$FTHG)
GoalDifference <- sum(EPL1415$FTHG)
GoalDifference <- sum(EPL1415$FTHG) - sum(EPL1415$FTAG)
GoalDifference <- sum(EPL1415$FTHG) - sum(EPL1415$FTAG) / nrow(EPL1415)
GoalDifference <- (sum(EPL1415$FTHG) - sum(EPL1415$FTAG)) / nrow(EPL1415)
AverageGoalDifference <- mean(sum(EPL1415$FTHG) - sum(EPL1415$FTAG))
AverageGoalDifference <- mean(EPL1415$FTHG) - mean(EPL1415$FTAG)
AverageGoalDifference <- mean(EPL1415$FTHG - EPL1415$FTAG)
rm(GoalDifference)
?mean
source("Football01.R")
print(AverageGoalDifference)
source("Football01.R")
source("Football01.R")
source("Football01.R")
library(UsingR)
package.install("UsingR")
install.packages("UsingR")
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
hist(x)
var(x)
var(x)/n
sd(x)
sd(x)/sqrt(n)
choose(8, 7) * 0.5^8 + choose(8, 8) * 0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
pbinom(7, size = 8, prob = 0.5, lower.tail = FALSE)
?pbinom
choose(8, 6) * 0.5^8 + choose(8, 8) * 0.5^8
pbinom(7, size = 8, prob = 0.5)
pbinom(6, size = 8, prob = 0.5)
pbinom(8, size = 8, prob = 0.5)
pbinom(7, size = 8, prob = 0.5)
pbinom(7, size = 8, prob = 0.5, lower.tail = TRUE)
1 - pbinom(6, size = 8, prob = 0.5, lower.tail = TRUE)
1 - pbinom(7, size = 8, prob = 0.5, lower.tail = TRUE)
qnorm(0.95, mu = mu, sd = sd)
qnorm(0.95, mean = mu, sd = sd)
pnorm(1160, mean = 1020, sd = 50)
pnorm(1160, mean = 1020, sd = 50, lower.tail = FALSE)
percentage(pnorm(1160, mean = 1020, sd = 50, lower.tail = FALSE))
pnorm(1160, mean = 1020, sd = 50, lower.tail = FALSE) * 100
qnorm(0.75, mean = 1020, sd = 50)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75/sqrt(1000))
qnorm(0.95, mean = 1100, sd = 75/sqrt(100))
pbinom(quantile, size=n, prob=p, lower.tail = FALSE)
pnorm(70, mean = 10, sd = 10)
pnorm(70, mean = 80, sd = 10)
pbinom(3, size=5, prob=0.5, lower.tail = FALSE)
pnorm(16, mean = 15, sd = 10) - pnorm(14, mean = 15, sd = 10)
ppois(10, lambda = 15)
1100 + c(-1,1) * qt(p=.95+(1-.95)/2, df=8) * 30/sqrt(9)
data(sleep)
head(sleep)
grp1 <- sleep$extra[1:10]
grp2 <- sleep$extra[11:20]
diff <- grp1 - grp2
diff
mean(diff)
sd(diff)
t.test(differe)
t.test(diff)
t.test(grp1, grp2)
t.test(grp1, grp2, paired = TRUE)
t.test(extra ~ I(relevel(group,2)), paired = TRUE)
t.test(extra ~ I(relevel(group,2)), paired = TRUE, data = sleep)
t.test(extra ~ I(relevel(group,2)), paired = TRUE, data = sleep)
library(datasets)
data("ChickWeight")
library(reshape2)
head(ChickWeight)
head(ChickWeight, 50)
View(ChickWeight)
dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
CW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
rexp(n, lambda)
rexp(100, lambda)
rexp(100, 10)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(runif(100000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(1000)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(100000)))
hist(mns)
((1/0.2)/sqrt(40))^2
mean(rexp(40, 0.2))
for (i in 1 : 1000)
x <- c(x, mean(rexp(40, 0.2)))
hist(x)
x <- NULL
for (i in 1 : 1000)
x <- c(x, mean(rexp(40, 0.2)))
hist(x)
mean(x)
(1/0.2)/sqrt(40)
var(mean(x))
x <- NULL
for (i in 1 : 1000)
x <- c(x, mean(rexp(40, 0.2)))
var(mean(x))
ggplot(data = x)
library(datasets)
View(ToothGrowth)
head(ToothGrowth)
str(ToothGrowth)
OJGrp <- ToothGrowth$len[ToothGrowth$supp=="OJ"]
VCGrp <- ToothGrowth$len[ToothGrowth$supp=="VC"]
t.test(OJGrp, VCGrp, paired = FALSE, var.equal = FALSE)
boxplot(len ~ dose | supp, ToothGrowth, xlab = "Dosage in mg", ylab = "Tooth Length", main = "Tooth Growth")
boxplot(len ~ dose, ToothGrowth, xlab = "Dosage in mg", ylab = "Tooth Length", main = "Tooth Growth")
OJGrp
OJGrp <- ToothGrowth[ToothGrowth$supp=="OJ"]
OJGrp <- ToothGrowth$len[ToothGrowth$supp=="OJ"]
VCGrp <- ToothGrowth$len[ToothGrowth$supp=="VC"]
OJGrp <- ToothGrowth[,ToothGrowth$supp=="OJ"]
OJGrp <- ToothGrowth[ToothGrowth$supp=="OJ",]
View(OJGrp)
VCGrp <- ToothGrowth[ToothGrowth$supp=="VC",]
boxplot(len ~ dose | supp, OJGrp, xlab = "Dosage in mg", ylab = "Tooth Length", main = "Tooth Growth")
boxplot(len ~ dose, OJGrp, xlab = "Dosage in mg", ylab = "Tooth Length", main = "Tooth Growth")
boxplot(len ~ dose, OJGrp, xlab = "Dosage (mg)", ylab = "Tooth Length", main = "Tooth Growth for Orange Juice")
boxplot(len ~ dose, OJGrp, xlab = "Dosage (mg)", ylab = "Tooth Length", main = "Tooth Growth for Orange Juice")
boxplot(len ~ dose, VCGrp, xlab = "Dosage (mg)", ylab = "Tooth Length", main = "Tooth Growth for Ascorbic Acid")
t.test(OJGrp$len, VCGrp$len, paired = TRUE, var.equal = FALSE)
t.test(OJGrp, VCGrp, paired = TRUE, var.equal = FALSE)$len
t.test(OJGrp$len, VCGrp$len, paired = TRUE, var.equal = FALSE)$len
t.test(OJGrp$len, VCGrp$len, paired = TRUE, var.equal = FALSE)
t.test(OJGrp$len, VCGrp$len, paired = FALSE, var.equal = FALSE)
?par
HalfGrp <- ToothGrowth[ToothGrowth$dose=="0.5"",]
HalfGrp <- ToothGrowth[ToothGrowth$dose=="0.5",]
OneGrp <- ToothGrowth[ToothGrowth$dose=="1",]
TwoGrp <- ToothGrowth[ToothGrowth$dose=="2",]
boxplot(len ~ supp, HalfGrp, ylim = c(0, 40), xlab = "Dosage (mg)", ylab = "Tooth Length", main = "Tooth Growth for Orange Juice")
boxplot(len ~ supp, TwoGrp, ylim = c(0, 40), xlab = "Supplement Type", ylab = "Tooth Length", main = "Tooth Growth for 2 mg Dosage")
par(mfrow=c(1,3))
boxplot(len ~ supp, HalfGrp, ylim = c(0, 40), xlab = "Supplement Type", ylab = "Tooth Length", main = "Tooth Growth for 0.5 mg Dosage")
boxplot(len ~ supp, OneGrp, ylim = c(0, 40), xlab = "Supplement Type", ylab = "Tooth Length", main = "Tooth Growth for 1 mg Dosage")
boxplot(len ~ supp, TwoGrp, ylim = c(0, 40), xlab = "Supplement Type", ylab = "Tooth Length", main = "Tooth Growth for 2 mg Dosage")
par(mfrow=c(1,3))
boxplot(len, HalfGrp, ylim = c(0, 40), xlab = "Supplement Type", ylab = "Tooth Length", main = "Tooth Growth for 0.5 mg Dosage")
boxplot(len, OneGrp, ylim = c(0, 40), xlab = "Supplement Type", ylab = "Tooth Length", main = "Tooth Growth for 1 mg Dosage")
boxplot(len, TwoGrp, ylim = c(0, 40), xlab = "Supplement Type", ylab = "Tooth Length", main = "Tooth Growth for 2 mg Dosage")
boxplot(len ~ dose, ToothGrowth, ylim = c(0, 40), xlab = "Supplement Type", ylab = "Tooth Length", main = "Tooth Growth observation by Dosage")
boxplot(len ~ dose, ToothGrowth, ylim = c(0, 40), xlab = "Dosage (mg)", ylab = "Tooth Length", main = "Tooth Growth observation by Dosage")
par(mfrow=c(1,1))
boxplot(len ~ dose, ToothGrowth, ylim = c(0, 40), xlab = "Dosage (mg)", ylab = "Tooth Length", main = "Tooth Growth observation by Dosage")
par(mfrow=c(1,1))
boxplot(len ~ dose, ToothGrowth, ylim = c(0, 40), xlab = "Dosage (mg)", ylab = "Tooth Length", main = "Tooth Growth observation by Dosage\n (Irrespective of Supplement Type)")
t.test(OJGrp$len, VCGrp$len, paired = TRUE, var.equal = FALSE)
1100 + c(-1,1) * qt(p=.95+(1-.95)/2, df=8) * 30/sqrt(9)
## Question 2
## ci_high = 0, m = -2, n = 9
ci_high - m * sqrt(n) / qt(p=.95+(1-.95)/2, df=n-1)
0 - m * sqrt(n) / qt(p=.95+(1-.95)/2, df=n-1)
ci_high = 0
m = -2
n = 9
ci_high - m * sqrt(n) / qt(p=.95+(1-.95)/2, df=n-1)
n1 = 10
m1 = 5
var1 = .68
n2 = 10
m2 = 3
var2 = 0.60
sp <- sqrt( ( (n1-1)*var1+(n2-1)*var2 ) / (n1+n2-2) )
(m2-m1) + c(-1,1) * qt(p=.975, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
n1 = 100
m1 = 6
sd1 = 2
n2 = 100
m2 = 4
sd2 = 0.5
sp <- sqrt( () (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2) )
sp <- sqrt( (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2) )
sp <- sqrt( ( (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2) )
(m1-m2) + c(-1,1)*qt(p=.975, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
sp <- sqrt( ( (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2) )
(m1-m2) + c(-1,1)*qt(p=.90+(1-.90)/2, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
1100 + c(-1,1) * qt(p=0.95+(1-.95)/2, df=8) * 30/sqrt(9)
1000 + qt(0.95) * 30/sqrt(9)
?qt
1100 + c(-1,1) * qt(p=0.95+(1-.95)/2, df=8) * 30/sqrt(9)
ci_high = 0
m = -2
n = 9
ci_high - m * sqrt(n) / qt(p=.95+(1-.95)/2, df=n-1)
n1 = 10
m1 = 5
var1 = .68
n2 = 10
m2 = 3
var2 = 0.60
sp <- sqrt( ( (n1-1)*var1+(n2-1)*var2 ) / (n1+n2-2) )
(m2-m1) + c(-1,1) * qt(p=.975, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
n1 = 100
m1 = 6
sd1 = 2
n2 = 100
m2 = 4
sd2 = 0.5
sp <- sqrt( ( (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2) )
(m1-m2) + c(-1,1)*qt(p=.975, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
## Question 7
# Treated:
n1 = 9
m1 = -3
sd1 = 1.5
# Placebo:
n2 = 9
m2 = 1
sd2 = 1.8
sp <- sqrt( ( (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2) )
(m1-m2) + c(-1,1)*qt(p=.90+(1-.90)/2, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
(m1-m2) + c(-1,1)*qt(p=.975, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
n1 = 100
m1 = 6
sd1 = 2
# New
n2 = 100
m2 = 4
sd2 = 0.5
sp <- sqrt( ( (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2) )
# Old - New
(m1-m2) + c(-1,1)*qt(p=.975, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
test <- t.test(x = c(140,138,150,148,135), y = c(132,135,151,146,130), alt = "two.sided", paired = TRUE)
test$p.value
test <- t.test(x = c(140,138,150,148,135), y = c(132,135,151,146,130), paired = TRUE)
test$p.value
t.test(x = c(140,138,150,148,135), y = c(132,135,151,146,130), paired = TRUE)
n <- 9
mu <- 1100
sd <- 30
alpha <- 0.05 # 5%, 1 - alpha/2 = 0.975
mu + c(-1,1) * qt(0.975, df = n - 1) * mu / sqrt(n)
mu + c(-1,1) * qt(0.975, df = n - 1) * sd / sqrt(n)
n <- 4
x <- 3
test <- binom.test( x, n, alt="greater")
round(test$p.value, 2)
binom.test( x, n, alt="greater")
binom.test$p-value
binom.test$pvalue
result <- binom.test( x, n, alt="greater")
result$$p-value
result$p-value
result$pvalue
binom.test( x, n, alt="lesser")
binom.test( x, n, alt="less")
binom.test( x, n, alt="greater")
rate <- 0.01 # 1/100
errors <- 10
period <- 1787
poisson.test(errors, T = period, r = rate, alt="less")
group_sd <- (((treated - 1) * loss_placebo^2 + (placebo - 1) * loss_treated^2) / (treated + placebo - 2))
treated <- 9            # number treated
placebo <- 9            # number placebo
loss_treated <- 1.5     # stdev for treated
loss_placebo <- 1.8     # stdev for placebo
mean_diff_treated <- -3 # avg diff for treated
mean_diff_placebo <- 1  # avg diff for placebo
group_sd <- (((treated - 1) * loss_placebo^2 + (placebo - 1) * loss_treated^2) / (treated + placebo - 2))
pt((mean_diff_placebo - mean_diff_treated) / (group_sd * (1 / treated + 1 / loss_treated)^0.5), df = treated + placebo -2)
n <- 100
mu <- 0.01
sd <- 0.04
p <- 0.05
power.t.test(n, mu, sd , sig.level = p, type = "one.sample", alt = "one.sided")$power
power.t.test(n, mu, sd , sig.level = p, type = "one.sample", alt = "one.sided")
pow <- 0.9
power.t.test(pow, mu, sd, sig.level = p, type = "one.sample", alt="one.sided")
(0.9/10)*10
?power.t.test
power.t.test(n = n, delta = mu, sd, sig.level = p, type = "one.sample", alt = "one.sided")
pow <- 0.9
power.t.test(delta = mu, sd, sig.level = p, power = pow, type = "one.sample", alt = "one.sided")
power.t.test(delta = mu, sd = sd, sig.level = p, power = pow, type = "one.sample", alt = "one.sided")
power.t.test(n = 140, delta = mu, sd, sig.level = p, type = "one.sample", alt = "one.sided")
t.test(x = c(140,138,150,148,135), y = c(132,135,151,146,130), paired = TRUE)
n <- 4
x <- 3
binom.test( x, n, alt="greater")
rate <- 0.01 # 1/100
errors <- 10
period <- 1787
poisson.test(errors, T = period, r = rate, alt="less")
n <- 100
mu <- 0.01
sd <- 0.04
p <- 0.05
power.t.test(n = n, delta = mu, sd, sig.level = p, type = "one.sample", alt = "one.sided")
?mtcars
library(datasets)
data(mtcars)
dim(mtcars)
describe(mtcars)
names(mtcars)
?mtcars
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
coef(fit)
summary(fit)
coef(fit)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
ww <- summary(fit)$coef[3]    # With weight
ww
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
wow <- summary(fit1)$coef[3]  # Without weight
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fitboth <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit, fitboth)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
coef(fit4)
?wtcars
?wtcars
?wtcar
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y ~ x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbetas(lm(y ~ x))[, 2]
dfbetas(lm(y ~ x))
0.99/(0.99+0.999)
TP <- 99
install.packages("caret")
install.packages("car")
install.packages(c("data.table", "evaluate", "formatR", "ggplot2", "highr", "HistData", "Hmisc", "knitr", "mime", "Rcpp", "rmarkdown", "scales", "stringi"))
install.packages("caret")
install.packages("car")
library(AppliedPredictiveModeling)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
testIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[-testIndex, ]
testing = ata[testIndex, ]
testing = adData[testIndex, ]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
par(mfrow = c(2, 1), mar = c(4, 2, 2, 2))
hist(training$Superplasticizer, main = "")
# Log transform
hist(log(training$Superplasticizer + 1), main = "")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predictorName <- names(training)
(ILpredictor <- predictorName[substr(predictorName, 1, 2) == "IL"])
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
ProcPCA$numComp
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .9)
ProcPCA$numComp
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
library(caret)
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
installed.packages("e1071")
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
library(e1071)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
preProc <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[, ILpredictor])
confusionMatrix(testingIL$diagnosis, predict(ModelPCA, testPC))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(mixtures)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predictorName <- names(training)
(ILpredictor <- predictorName[substr(predictorName, 1, 2) == "IL"])
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .9)
ProcPCA$numComp
setwd("..")
getwd()
setwd("Module9-Assignment")
library(slidify)
install.packages("devtools")
shiny::runApp()
install.packages("devtools", dependencies = TRUE)
shiny::runApp()
shiny::runApp()
RainData <- read.csv(file.choose(), header = TRUE, sep = ",")
RainData <- RainData[1097:2557, ]
RiverData <- read.csv(file.choose(), header = TRUE, sep = ",")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(slidify)
install.packages("slidify")
library(devtools)
install.packages("devtools")
install.packages("curl")
install.packages("httr")
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
library(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidifylibraries")
library(slidify)
author(correlation)
author("correlation")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(knitr)
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
